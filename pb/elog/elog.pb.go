// Code generated by protoc-gen-go. DO NOT EDIT.
// source: elog.proto

/*
Package elog is a generated protocol buffer package.

It is generated from these files:
	elog.proto

It has these top-level messages:
	Event
	Query
*/
package elog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	IpClient string            `protobuf:"bytes,1,opt,name=ip_client,json=ipClient" json:"ip_client,omitempty"`
	IpServer string            `protobuf:"bytes,2,opt,name=ip_server,json=ipServer" json:"ip_server,omitempty"`
	Tags     map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Message  string            `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetIpClient() string {
	if m != nil {
		return m.IpClient
	}
	return ""
}

func (m *Event) GetIpServer() string {
	if m != nil {
		return m.IpServer
	}
	return ""
}

func (m *Event) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Event) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Query struct {
	IpClient string            `protobuf:"bytes,1,opt,name=ip_client,json=ipClient" json:"ip_client,omitempty"`
	IpServer string            `protobuf:"bytes,2,opt,name=ip_server,json=ipServer" json:"ip_server,omitempty"`
	Tags     map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Query) GetIpClient() string {
	if m != nil {
		return m.IpClient
	}
	return ""
}

func (m *Query) GetIpServer() string {
	if m != nil {
		return m.IpServer
	}
	return ""
}

func (m *Query) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "elog.stats.Event")
	proto.RegisterType((*Query)(nil), "elog.stats.Query")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Elog service

type ElogClient interface {
	Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (Elog_ListClient, error)
}

type elogClient struct {
	cc *grpc.ClientConn
}

func NewElogClient(cc *grpc.ClientConn) ElogClient {
	return &elogClient{cc}
}

func (c *elogClient) Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/elog.stats.Elog/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elogClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (Elog_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Elog_serviceDesc.Streams[0], c.cc, "/elog.stats.Elog/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &elogListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Elog_ListClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type elogListClient struct {
	grpc.ClientStream
}

func (x *elogListClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Elog service

type ElogServer interface {
	Create(context.Context, *Event) (*google_protobuf.Empty, error)
	List(*Query, Elog_ListServer) error
}

func RegisterElogServer(s *grpc.Server, srv ElogServer) {
	s.RegisterService(&_Elog_serviceDesc, srv)
}

func _Elog_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElogServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elog.stats.Elog/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElogServer).Create(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elog_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElogServer).List(m, &elogListServer{stream})
}

type Elog_ListServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type elogListServer struct {
	grpc.ServerStream
}

func (x *elogListServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Elog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elog.stats.Elog",
	HandlerType: (*ElogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Elog_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Elog_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "elog.proto",
}

func init() { proto.RegisterFile("elog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0xac, 0xdb, 0xa4, 0x25, 0x8f, 0x05, 0x2c, 0x84, 0xa2, 0x64, 0xa9, 0x32, 0x75, 0x72, 0xaa,
	0x22, 0x04, 0x62, 0xa4, 0xca, 0xc6, 0x42, 0x61, 0x62, 0x41, 0x0e, 0x7a, 0x58, 0x11, 0x69, 0x6c,
	0xd9, 0x4e, 0xa4, 0x7c, 0x13, 0xdf, 0xc1, 0x7f, 0xa1, 0x38, 0x09, 0x08, 0xba, 0x21, 0xb1, 0xbd,
	0xd3, 0x9d, 0xcf, 0xf7, 0xde, 0x01, 0x60, 0x29, 0x05, 0x53, 0x5a, 0x5a, 0x49, 0xfb, 0xd9, 0x58,
	0x6e, 0x4d, 0x14, 0x0b, 0x29, 0x45, 0x89, 0xa9, 0x63, 0xf2, 0xfa, 0x35, 0xc5, 0xbd, 0xb2, 0x6d,
	0x2f, 0x4c, 0x3e, 0x08, 0xf8, 0x59, 0x83, 0x95, 0xa5, 0x31, 0x04, 0x85, 0x7a, 0x7e, 0x29, 0x0b,
	0xac, 0x6c, 0x48, 0x96, 0x64, 0x15, 0xec, 0x8e, 0x0a, 0xb5, 0x75, 0x78, 0x20, 0x0d, 0xea, 0x06,
	0x75, 0x38, 0x1d, 0xc9, 0x07, 0x87, 0x69, 0x0a, 0x9e, 0xe5, 0xc2, 0x84, 0xb3, 0xe5, 0x6c, 0x75,
	0xbc, 0x89, 0xd9, 0xf7, 0xdf, 0xcc, 0x59, 0xb3, 0x47, 0x2e, 0x4c, 0x56, 0x59, 0xdd, 0xee, 0x9c,
	0x90, 0x86, 0xb0, 0xd8, 0xa3, 0x31, 0x5c, 0x60, 0xe8, 0x39, 0xaf, 0x11, 0x46, 0x57, 0x10, 0x7c,
	0x89, 0xe9, 0x09, 0xcc, 0xde, 0xb0, 0x1d, 0xb2, 0x74, 0x23, 0x3d, 0x03, 0xbf, 0xe1, 0x65, 0x8d,
	0x43, 0x84, 0x1e, 0xdc, 0x4c, 0xaf, 0x49, 0xf2, 0x4e, 0xc0, 0xbf, 0xaf, 0x51, 0xb7, 0xff, 0xb3,
	0x87, 0xb3, 0xfe, 0xbd, 0xc7, 0x9f, 0xd3, 0x6e, 0x24, 0x78, 0x59, 0x29, 0x05, 0xbd, 0x84, 0xf9,
	0x56, 0x23, 0xb7, 0x48, 0x4f, 0x0f, 0xae, 0x16, 0x9d, 0xb3, 0xbe, 0x38, 0x36, 0x16, 0xc7, 0xb2,
	0xae, 0xb8, 0x64, 0x42, 0xd7, 0xe0, 0xdd, 0x15, 0xc6, 0xfe, 0x7c, 0xe4, 0x22, 0x46, 0x87, 0x3e,
	0xc9, 0x64, 0x4d, 0x6e, 0x83, 0xa7, 0x85, 0xca, 0xd3, 0x8e, 0xca, 0xe7, 0xce, 0xee, 0xe2, 0x33,
	0x00, 0x00, 0xff, 0xff, 0x6d, 0x14, 0x94, 0xdb, 0x2f, 0x02, 0x00, 0x00,
}
